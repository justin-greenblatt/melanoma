[paths]
home = /home/a2iediting
data = ${paths:home}/data
jpeg = ${paths:data}/jpeg/train
metadata = ${paths:data}/train.csv
metadata_test = ${paths:data}/test.csv
histograms_bw = ${paths:data}/histogramsBW
histograms = ${paths:data}/histograms
otsu = ${paths:data}/otsu
croped = ${paths:data}/croped
resized = ${paths:data}/resized
rotated = ${paths:data}/rotated
processed =  ${paths:data}/processed
unitTestData = ${paths:data}/unitTestData
image_unit_test = ${paths:jpeg}/ISIC_0962601.jpg
jpeg_unit_test = ${paths:unitTestData}/jpeg
processed_unit_test = ${paths:unitTestData}/processed

[data_augmentation]
#DictionaryLike -> Key1:Value1, Key2:Value2,...
#You can also use '^' to denote a and operator -> Key1^Key2:Value1^Value2,
rotation_targets = benign_malignant:malignant
#Respective amounts of replicates for each specified condition above
rotation_replicates = 20
rotation_degrees_range = 30:330
rotation_degree_step = 3
# yes/no - randomly choose an axis to flip image choice(y,x,x and y, do not flip)
rotation_flip_random = yes

[dataset]
color_mode = grayscale
batch_size = 32
image_size = 64,64
validation_split = 0.2
label_mode = binary
[convpool_model]

# This model is an intercalated layer of convolutional layers and maxpooling layers
# They start and end with convolutional layers so nConv = nMaxP + 1
input_shape = 64,64,1
convolution_layer_names = allegroI,allegroII,allegroIII
convolution_filters = 64,128,256
convolution_kernel_sizes = 3,3,3
convolution_activation = relu,relu,relu
maxpooling_layer_names = adagioI,adagioII
maxpooling_pool_size = 2,2
output_layer = 1
output_activation = sigmoid
training_loss_function = binary_crossentropy
training_metrics = accuracy
training_epochs = 10
training_optimizer = rmsprop
